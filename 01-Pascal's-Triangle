class Solution {
    public List<List<Integer>> generate(int numRows) {

        // Fear Kills more dreams than failure ever will. 

        List<List<Integer>> res = new ArrayList<>();

        for (int i = 0; i < numRows; i++) {
            List<Integer> row = new ArrayList<>();

            for (int j = 0; j <= i; j++) {
                if (j == 0 || j == i) {
                    row.add(1);
                } else {
                    int val = res.get(i - 1).get(j - 1) + res.get(i - 1).get(j);
                    row.add(val);
                }
            }

            res.add(row);
        }

        return res;
    }
}


/*
Pascalâ€™s Triangle is a triangular array where each number is the sum of the two numbers directly above it from the previous row. The triangle always starts with [1] at the top. For each subsequent row, the first and last elements are always 1, and each inner element is calculated as the sum of the two elements diagonally above it from the previous row. To generate it for numRows, we iterate from row 0 to numRows - 1, building each row using this rule and storing the result as a list of lists. This structure allows us to return the full triangle built up to the desired number of rows efficiently.
*/
